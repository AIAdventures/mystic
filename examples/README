== Notes on mystic examples ==
NOTE: for all examples that use matplotlib, please use the TKAgg backend.
Thus, run the examples like this:  "python example04.py -dTKAgg"
(see ticket #36 for more details).

Dependencies:
 - All examples with prefix "example" should run without new dependencies, and are intended as a tutorial (i.e. TRY THESE FIRST).
 - All examples with prefix "test_" should run without new dependencies.
 - All examples with prefix "gplot_" requres gnuplot-py to be installed.

Exceptions to the rule:
 - The following examples also require scipy to be installed. (tested on version 0.4.8 and 0.7.0):
    . cg_rosenbrock.py
    . test_lorentzian.py
    . test_mogi.py
    . test_mogi_anneal.py,
    . test_mogi_leastsq.py
    . test_twistedgaussian.py
    . test_twistedgaussian2.py

Special examples:
 - All examples with prefix "rosetta_" require park to be installed. (tests on version park-1.2).  Run with "--park" to execute with park. See "--help" for more options.
 - The derun.py example requires pyre (from pythia-0.8) to be installed, and drives the otherwise useless 'dummy.py'.


-------------------------------------------------------------------------------

Notes on the "ffit" tests/examples:
 - test_ffit: The fitting problem whose exact solution is 8th order Chebyshev polynomial of the first kind.  This example uses a Ctrl-C signal handler. Try ctrl-c as the differential_evolution strategy is running.
 - test_ffit2: The fitting problem whose exact solution is 16th order Chebyshev polynomial of the first kind.  Also uses the signal_handler. 
 - test_ffitB: Same as test_ffit.py, but uses DifferentialEvolutionSolver2 instead of DifferentialEvolutionSolver. 
 - test_ffitC: Same as test_ffit.py, but uses scipy_optimize.fmin.
 - test_ffitD: Same as test_ffit.py, but uses scipy_optimize.diffev.


Notes on the "mogi" tests/examples:
 - test_mogi.py: One mogi source with noise, comparison between DE and Conjugate Gradient, Simplex, and least squares (Levenberg Marquardt). CG / lsq don't work very well. lsq should work when bounds on the parameters are given, but minpack (wrapped by scipy) version doesn't seem to support bounds.
 - sam_mogi.py: charts the progress of scipy's Nelder Mead and draws with matlab
 - test_mogi_leastsq.py: tests with scipy (minpack's) leastsq, but hasn't been tuned so it doesn't work at all.
 - test_mogi_anneal.py: tests with scipy simulated annealing, but hasn't been tuned, so again, doesn't work at all.
 - test_mogi2.py: two mogi sources
 - test_mogi3.py: reimplements test_mogi 


# end of file
